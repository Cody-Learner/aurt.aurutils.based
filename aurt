#!/bin/bash
# aurt 2018-03-16   Depencencies: sudo base-devel cower aurutils mc
# date:year-mo-day
# shellcheck disable=SC1091,SC2034,SC2002,SC2116

basedir="${HOME}"/z-AUR-Aurt                             			# "${basedir}"   =  base directory for build
builddir="${HOME}"/z-AUR-Aurt/"${2}"                     			# "${builddir}"  =  build directory
pdate=$(date '+%Y-%m-%d')				 			# "${pdate}"     =  todays date

readarray -t pkglist <<< $(echo "$@"|awk '{$1=""; print}'|fmt -1|awk '{$1=$1}1')
export PAGER=mc
export AURDEST=/home/jeff/z-AUR-Aurt.git/
bold=$(tput bold)
normal=$(tput sgr0)
cyan='\033[0;36m'
none='\033[0m'
T=timer

   #===================================================== INSTALL =======================================================

install () {

	aursync --no-confirm "${pkglist[@]}"
	sudo pacman -S --noconfirm --color=always "${pkglist[@]}"

	verify=$(pacman -Qq "${pkglist[@]}"|fmt -1000)

if 	[[ "${verify}" = "${pkglist[@]}" ]]; then

	. aurt-info --installprint1
    else
	. aurt-info --installprint2
fi

}
   #==================================================== FORCEINSTALL ===================================================

forceinstall () {

	aursync --force --no-confirm "${pkglist[@]}"
	sudo pacman -S --force --noconfirm --color=always "${pkglist[@]}"

	verify=$(pacman -Qq "${pkglist[@]}"|fmt -1000)

if 	[[ "${verify}" = "${pkglist[@]}" ]]; then

	. aurt-info --forceinstallprint1
    else
	. aurt-info --forceinstallprint2
fi
}
   #====================================================== UPDATE =======================================================

update () {

	. aurt-info --updateprint
	aursync -u ; echo
}
   #====================================================== SEARCH  ======================================================

search () {

	. aurt-info --searchprint1			
	pacsearch "${2}"

	. aurt-info --searchprint2
	aursearch -P "${2}"

	. aurt-info --searchprint3
	aursearch -Fv "${2}" 

	. aurt-info --searchprint4
	pacman -Sii --color=always "${2}" 2>/dev/null
}
   #====================================================== REMOVE =======================================================

remove () {

	. aurt-info --removeprint1

	rm -fr /home/jeff/z-AUR-Aurt.git/"${2}"
	sudo pacman -Rns --color=always "${2}"
	repoctl remove "${2}" 2>/dev/null
	repose -dv /var/cache/pacman/aur/aur "${2}"

	pkg=$(pacman -Qq "${2}" 2>/dev/null)

if 	[[ -z "$pkg" ]]; then

	. aurt-info --removeprint2
    else
	. aurt-info --removeprint3
fi
}
   #=================================================== UDREPORT ========================================================

udreport () {

	udrep=$(aurcheck -ad aur)

	aud=$(echo "${udrep}" | awk '/>/' | column -t) ; audN=$(echo "$aud"|wc -l)
	if [[ -z $aud ]]; then audN=0; aud=":: No updates available"; fi

	nwr=$(echo "${udrep}" | awk '/</' | column -t) ; nwrN=$(echo "$nwr"|wc -l)
	if [[ -z $nwr ]]; then nwrN=0; nwr=":: Nothing to list"; fi

	equ=$(echo "${udrep}" | awk '/=/' | column -t) ; equN=$(echo "$equ"|wc -l)
	if [[ -z $equ ]]; then equN=0; equ=":: Nothing to list" ;fi

while true

	. aurt-info --udreportprint1

		do read -t 5 -n 1 -p ":: Show same as AUR version list of packages?      yes/no  (5 sec timeout to no) 
" -s  yn

			if [[ $? != 0 ]]; then echo; break; fi
			echo
			case $yn in
			y|yes) echo "$equ" ; break	;;
			n|no)  break	 		;;
			* ) echo "y-n ?" 		;;
			esac

		done

	. aurt-info --udreportprint2
}
   #====================================================== SYNC =========================================================

sync () {

	. aurt-info --syncprint1

if 	[[ -e /tmp/updates ]]; then
	rm /tmp/updates || echo "ERROR Removing /tmp/updates"; exit
fi
							# Create list AUR packages to check.
	dlist=$(pacman -Qq|aursift 2>/dev/null)

	. aurt-info --syncprint2

for P in $dlist
do							# Prepare to check installed version -vs- available version
							# Avl vers via 'makepkg -so' parse ver from 'makepkg --printsrcinfo'
	builddir="${HOME}"/z-AUR-Aurt.git/"${P}"
	C1=$(pacman -Q "${P}" | awk '{print $2}')

	. aurt-info --syncprint3

	cd "${builddir}" 2>/dev/null || forcebuild

	makepkg -so --needed --noconfirm &>/dev/null

	C2=$(makepkg --printsrcinfo | awk '/pkg[vr]/ {print $3}' | awk '{printf $0 "-"; getline; print $0}')
	epoch=$(makepkg --printsrcinfo | awk '/epoch/ {print $3}')
if	[[ -n $epoch ]]; then
	C2="$epoch:$C2"
fi							# Check if installed version different from available version
							# If different, add package to update list and message user.
if	[[ $C1 != "$C2" ]]; then

	. aurt-info --syncprint4
	echo "${P}" >> /tmp/updates
fi							# Prepare for git HEAD local -vs- remote backup check

	C3=$(git ls-remote https://aur.archlinux.org/"${P}".git HEAD|awk '{print $1}')
	C4=$(git -C "${builddir}" rev-parse HEAD)
							# For pkgs only included as part of others & w/o git repo. 
							# ie: aursec-tui is part of aursec
							# Eliminate false positive update status.
	if [[ -z ${C3} ]]; then C3=$C4 ; fi
							# Check if local git HEAD different from remote as backup check
							# If different, add package to update list and message user.
if	[[ ${C3} != "${C4}" ]]; then

	. aurt-info --syncprint5
	echo "${P}" >> /tmp/updates
fi
	echo
done							# If no updates available, create file with message and current date.
							# Notify user with message.
if	[[ ! -e /tmp/updates ]]; then

	. aurt-info --syncprint6
	echo ":: No AUR updates available as of last sync on ${pdate}" >/tmp/noupdates
	exit
fi
	md5sum /tmp/updates >/tmp/md5sum 2>/dev/null
}
   #==================================================== VCSUPDATE ======================================================

vcsupdate () {

	if	[[ -e /tmp/noupdates ]] && [[ -e /tmp/updates  ]]; then rm /tmp/noupdates ;	fi
	if	[[ -e /tmp/noupdates ]]; then echo ; cat /tmp/noupdates ; echo ; exit ; 	fi
	if	[[ ! -e /tmp/updates ]] && [[ ! -e /tmp/md5sum ]]; then 
	. aurt-info --vcsupdateprint1 ; exit; 							fi

if	[[ $(cat /tmp/md5sum) = $(md5sum /tmp/updates) ]]; then                 # Integrity check updates file
	awk '!seen[$0]++' /tmp/updates >/tmp/ud && mv /tmp/ud /tmp/updates      # If pass, prepare update list for makepkg
	udlist=$(cat /tmp/updates | fmt -1000)                                  # Remove any duplicate entries in updates file
	N=$(cat /tmp/updates | wc -l)                           		# Set filtered update list to variable
										# Count number of updates in list and set to variable
	. aurt-info --vcsupdateprint2
   else
	. aurt-info --vcsupdateprint5; exit					# If md5sum match failure, exit with message
fi
	echo -e ${cyan} ${bold}
	. aurt-info --vcsupdateprint3
	. aurt-info --vcsupdateprint4
while true									# Message user, get authorization to proceed with update
do 	read -r -n 1 -p ":: Proceed with update? [Y/n]
" -s yn
	echo -e ${none} ${normal}
	case $yn in
		y|yes) break	 	;;
		n|no)  return; exit	;;
		 *) echo "y-n ?" 	;;
	esac
done
										# Feed update list to aursync for build and install
for P in $udlist
do
	builddir=${HOME}/z-AUR-Aurt.git/"${P}"


	aursync --force --no-confirm "${P}"
	sudo pacman -S --force --noconfirm --color=always "${P}"

done
										# Delete update related files
	rm /tmp/updates
	rm /tmp/md5sum
	rm /tmp/noupdates 2>/dev/null
}
   #=================================================== DEPENDENCIES ====================================================

dependencies () {
										# Gather raw dependency data. AUR + OFFICIAL combined, and AUR specific.
		   								# muall  =   met unmet all combined dependencies
	readarray -t muall <<< "$(aurchain -a "${2}"|sed '$d')"
	if [[ -z ${muall[@]} ]]; then unset muall; fi
		   								# aurd  =   aur repo dependencies met unmet
	readarray -t aurd <<< "$(aurchain "${2}"|sed '$d')"
	if [[ -z ${aurd[@]} ]]; then unset aurd; fi
		   								# Filter to get unmet AUR+OFFICIAL combined.
		   								# uall  =   umet all dependencies
	readarray -t uall <<< "$(pacman -T $(echo "${muall[@]}") 2>/dev/null)"
		   								# Filter to get unmet AUR.
		   								# uaur  =   unmet aur repos
	readarray -t uaur <<< "$(pacman -T ${aurd[@]})"
	if [[ -z ${uaur[@]} ]]; then unset uaur; fi
		   								# Filter to get unmet OFFICIAL.
		   								# uoff  =   unmet official repos
	readarray -t uoff <<< "$(comm -23 <(echo "${uall[@]}"|fmt -1|sort\
				|awk '{$1=$1}1') <(echo "${uaur[@]}"|fmt -1\
				|sort|awk '{$1=$1}1'))"

	if [[ -z ${uoff[@]} ]]; then unset uoff; fi

	uaurp=$(echo ${uaur[@]} | fmt -140)
	uoffp=$(echo ${uoff[@]} | fmt -140)
	aurdp=$(echo ${aurd[@]} | fmt -140)
	muallp=$(echo ${muall[@]} | fmt -140)


	. aurt-info --dependenciesprint "${2}"
}
   #====================================================== PKGINFO ======================================================

pkginfo () {
		addinfo () {
			while true
			do read -t 5 -n 1 -p "::${bold} Want additional info?                yes/no ${normal} (5 sec timeout to no)
			" -s yn
				if [[ $? != 0 ]]; then echo; exit; fi
				echo
				case $yn in
				y|yes) break	 ;;
				n|no)  exit	 ;;
				* ) echo "y-n ?" ;;
				esac
			done
		}
										# IS THE PACKAGE AVAILABLE ?
if	[[ -z $(pacman -Ssq ${2} 2>/dev/null |awk '/^'"${2}"'$/') ]] &&
	[[ -z $(cower -i ${2}) ]]; then						

	. aurt-info --pkginfoprint1 "${2}"
	exit
fi										# IS INSTALLED, WANT INFO ?

if	[[ $(pacman -Qq ${2} 2>/dev/null | aursift 2>/dev/null) = ${2} ]]; then

	. aurt-info --pkginfoprint2 "${2}"
	addinfo
	cower -i "${2}"; exit
fi

if	[[ -n $(pacman -Qq ${2} 2>/dev/null) ]]; then

	. aurt-info --pkginfoprint3 "${2}"

	addinfo
	pacman -Sii --color=always "${2}" ; exit
fi
										# NOT INSTALLED, WANT INFO ?
if	[[ $(pacman -Ssq ${2} 2>/dev/null |awk '/^'"${2}"'$/') = ${2} ]]; then

	. aurt-info --pkginfoprint4 "${2}"

	addinfo
	pacman -Sii --color=always "${2}" ; exit
fi
if	aurp=$(cower -i "${2}")
	[[ $(echo "$aurp"|awk '/Name/ {print $3}') = ${2} ]]; then

	. aurt-info --pkginfoprint5 "${2}"
	addinfo
	. aurt-info --pkginfoprint6 "${2}"

	exit
fi
}
   #=================================================== PACKAGELIST =====================================================

packagelist () {

	readarray -t pkglst <<< "$(pacman -Qq| aursift 2>/dev/null)"

	. aurt-info --packagelistprint1
	echo "${pkglst[@]}"

	. aurt-info --packagelistprint2
	pacman -Q --color=always $(echo ${pkglst[@]}) | column -t

	. aurt-info --packagelistprint3
	pacman -Sl aur | column -t
}
   #======================================================== ORPH =======================================================

orph () {

	. aurt-info --orphprint
	pacman -Qtdq --color=always ; echo
}
   #========================================================= DEV =======================================================

dev () {

	. aurt-info --devprint
	pacman -Qq | awk '/^.+(-cvs|-svn|-git|-hg|-bzr|-darcs)$/' ; echo
}
   #===================================================== BYSIZE ========================================================

bysize () {

	. aurt-info --bysizeprint
	expac -H M '%m\t%n' | sort -hr | head -n 30 | column -t -R1 ; echo
}
   #=================================================== PARAMERROR ======================================================

parametererror () {

	. aurt-info --parametererrorprint
}

timer () {
	echo -ne "5"; sleep .5; echo -ne "-"; sleep .5; echo -ne "4"; sleep .5; echo -ne "-"; sleep .5; echo -ne "3"; sleep .5
	echo -ne "-"; sleep .5; echo -ne "2"; sleep .5; echo -ne "-"; sleep .5; echo -ne "1"; sleep .5; echo
}
   #=================================================== RUN FUNCTIONS ===================================================

if 	[[ -z "$*" ]]; then aurt-info --header; fi

while	:; do
	case "${1}" in
	    -S|--install)	install			"${@}"				;;
	   -Sf|--force)		forceinstall		"${@}"				;;
	  -Syu|--update)	update							;;
	   -Ss|--search)	search			"${@}" 				;;
	    -R|--remove)	remove			"${@}"				;;
	   -Qu|--udr)		udreport						;;
	   -Vc|--vcscheck)	sync							;;
	   -Vu|--vcsupdate)	vcsupdate						;;
	   -pd|--depends)	dependencies		"${@}"				;;
	   -pf|--files)		echo ; pacman -Ql	"${2}" |awk '{print $2}'; echo	;;
	   -pi|--info)		pkginfo			"${@}"				;;
	   -la|--list)		packagelist		"${@}"				;;
           -lo|--orphans)	orph							;;
	   -lv|--vcs)		dev							;;
          -log|--paclog)	paclog							;;
	  -T30|--bysize)	bysize							;;
	    -h|--help)		. aurt-info --help	"${@}"				;;
	   -?*)			parametererror;		aurt-help1 --header		;;
	     *)	break
	esac
    shift
done
unset PAGER
unset AURDEST
