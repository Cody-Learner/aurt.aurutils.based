#!/bin/bash
# aurt 2019-02-13   Depencencies: sudo base-devel mc expac pkgfile aurutils 1.5 cower repoctl
# date:year-mo-day
# shellcheck disable=SC1091,SC2002

export PAGER=mc
export AURDEST="${HOME}"/z-AUR-Aurt.git/
pdate=$(date '+%Y-%m-%d')
readarray -t pkglist <<< "$(echo "$@" | awk '{$1=""; print}'|fmt -1|awk '{$1=$1}1')"
OffUds=
LocPkgs=
bold='\033[1m'
cyan='\033[0;96m'
none='\033[00m'

   #===================================================== INSTALL =======================================================

install () {

	aursync --no-confirm "${pkglist[@]}"

	sudo pacsync aur                                                   ## NEW ##

	sudo pacman -S --noconfirm --color=always "${pkglist[@]}"

	verify=$(pacman -Qq "${pkglist[@]}"|fmt -1000)

if 	[[ "${verify}" = "${pkglist[*]}" ]]; then

	. aurt-info --installprint1
    else
	. aurt-info --installprint2
fi

}
   #==================================================== FORCEINSTALL ===================================================

forceinstall () {

	aursync --force --no-confirm "${pkglist[@]}"
	sudo pacman -S --overwrite --noconfirm --color=always "${pkglist[@]}"

	verify=$(pacman -Qq "${pkglist[@]}"|fmt -1000)

if 	[[ "${verify}" = "${pkglist[*]}" ]]; then

	. aurt-info --forceinstallprint1
    else
	. aurt-info --forceinstallprint2
fi
}
   #====================================================== UPDATE =======================================================

update () {

	. aurt-info --updateprint
	aursync -u ; echo
}
   #====================================================== SEARCH  ======================================================

search () {

	. aurt-info --searchprint1 "${2}"			
	pacsearch ^"${2}" ; if [[ -z $(pacsearch ^"${2}") ]]; then echo "N/A"; fi

	. aurt-info --searchprint2 "${2}"
	aursearch -P "${2}" || echo "N/A"

	. aurt-info --searchprint3 "${2}"
	aursearch -Fv "${2}" || echo "N/A"

	. aurt-info --searchprint4 "${2}"
	pacman -Sii --color=always "${2}" 2>/dev/null || echo "N/A"
}
   #====================================================== REMOVE =======================================================

remove () {

	. aurt-info --removeprint1 "${2}"


	rm -fr "${HOME}"/z-AUR-Aurt.git/"${2}"

	repoctl remove "${2}"
	sudo pacsync aur    >/dev/null

	sudo pacman -Rns --color=always "${2}"

	pkg=$(pacman -Qq "${2}" 2>/dev/null)

if 	[[ -z "$pkg" ]]; then

	. aurt-info --removeprint2 "${2}"
    else
	. aurt-info --removeprint3 "${2}"
fi
}
   #================================================= MANUALINSTALL ======================================================
			### This must be ran in the directory containing the package, < *.pkg.tar* >  ###
manualinstall () {

PKG="$2"
TEST=$(find -maxdepth 1 | awk -F/ '/pkg.tar/ {print $2}' | grep $2)

if	[[ -n $(find -maxdepth 1 | grep pkg.tar.xz) ]]; then

NAME=$(xzcat "${PKG}" 2>/dev/null | awk '/pkgname/ {print $3}' )
    elif
	[[ -n $(find -maxdepth 1 | grep pkg.tar) ]]; then

NAME=$(cat "${PKG}" 2>/dev/null | awk '/pkgname/ {print $3}')

fi

if	[[ $PKG = $TEST ]]; then
	cp "${PKG}" /var/cache/pacman/aur
	echo ":: Copying $2 to local aur repo"
    else
	echo ":: Error: "$2" is not present"; exit
fi
	repoctl add "${PKG}"
	repoctl update
	sudo pacsync aur &>/dev/null
	sudo pacman -S "${NAME}"
}
   #=================================================== UDREPORT ========================================================

udreport () {

	udrep=$(aurcheck -ad aur)

	aud=$(echo "${udrep}" | awk '/>/' | column -t) ; audN=$(echo "$aud"|wc -l)
	if [[ -z $aud ]]; then audN=0; aud=":: No updates available"; fi

	nwr=$(echo "${udrep}" | awk '/</' | column -t) ; nwrN=$(echo "$nwr"|wc -l)
	if [[ -z $nwr ]]; then nwrN=0; nwr=":: Nothing to list"; fi

	equ=$(echo "${udrep}" | awk '/=/' | column -t) ; equN=$(echo "$equ"|wc -l)
	if [[ -z $equ ]]; then equN=0; equ=":: Nothing to list" ;fi

	. aurt-info --udreportprint1

	while true
		do read -r -t 5 -n 1 -p ":: Show same as AUR version list of packages?      yes/no  (5 sec timeout to no) 
			" -s  yn || break
			echo
			case $yn in
			y|yes) echo "$equ" ; break	;;
			n|no)  break	 		;;
			* ) echo "y-n ?" 		;;
			esac
		done

	. aurt-info --udreportprint2
}
   #================================================== SYNC TESTING =====================================================
   ### parallelize via grouping and { backgrounding commands ; } and, wait < <(jobs -p)
   ### fix official package removal from repo problem with "NEW" code

sync () {

 ### NEW start

if	[[ -n $(checkupdates) ]]; then
	. aurt-info --syncprint7
	exit
fi

 ### NEW end
	
	rm /tmp/pid   2>/dev/null
	rm /tmp/jobs1 2>/dev/null
	. aurt-info --syncprint1

if 	[[ -e /tmp/updates ]]; then
	rm /tmp/updates || exit
fi
							# Create list AUR packages to check.

 ### NEW start

# dlist=$(pacman -Qq|aursift 2>/dev/null)
	  pacman -Qq|aursift 2>/dev/null | sort >/tmp/dlist

 ### NEW end

	. aurt-info --syncprint2

 ### NEW start

	pacman -Qmq|sort >/tmp/LocPkgs

if	[[ -n $(cat /tmp/LocPkgs) ]]; then
	. aurt-info --syncprint8 

dlist=$(comm -23 /tmp/dlist /tmp/LocPkgs)

    else

dlist=$(pacman -Qq|aursift 2>/dev/null)

fi
 ### NEW end

for P in $dlist
do							# Prepare to check installed version -vs- available version
							# Avl vers via 'makepkg -so' parse ver from 'makepkg --printsrcinfo'
	builddir="${HOME}"/z-AUR-Aurt.git/"${P}"
	C1=$(pacman -Q "${P}" | awk '{print $2}')

	. aurt-info --syncprint33

{	cd "${builddir}" 2>/dev/null || install		# Parallelize the following via {group commands: } and background

	makepkg -o --needed --noconfirm &>/dev/null

	C2=$(makepkg --printsrcinfo | /bin/sed -n '/pkgver/{s/.*= //;x}; /pkgrel/{s/.*= /-/;H}; /epoch/{s/.*= //;s/$/:/;x;H}; ${x;s/\n//g;p}')

	if	[[ $C1 != "$C2" ]]; then		# Check if installed version different from available version
							# If different, add package to update list and message user.
	. aurt-info --syncprint3
	. aurt-info --syncprint4
	echo "${P}" >>/tmp/updates
fi; } &

	echo "$!" >>/tmp/pid
							# Prepare for git HEAD local -vs- remote backup check

	C3=$(git ls-remote https://aur.archlinux.org/"${P}".git HEAD|awk '{print $1}')
	C4=$(git -C "${builddir}" rev-parse HEAD)
							# For pkgs only included as part of others & w/o git repo. 
							# ie: aursec-tui is part of aursec
							# Eliminate false positive update status.
	if [[ -z ${C3} ]]; then C3=$C4 ; fi
							# Check if local git HEAD different from remote as backup check
							# If different, add package to update list and message user.
if	[[ ${C3} != "${C4}" ]]; then

	. aurt-info --syncprint5
	echo "${P}" >> /tmp/updates

fi

done							# If no updates available, create file with message and current date.
	jobs -p >>/tmp/jobs				# Notify user with message.
	wait < <(jobs -p)

if	[[ ! -e /tmp/updates ]]; then

	. aurt-info --syncprint6
	echo ":: No AUR updates available as of last sync on ${pdate}" >/tmp/noupdates
	exit
fi
	md5sum /tmp/updates >/tmp/md5sum 2>/dev/null
}
   #================================================ VCSUPDATE ==========================================================

vcsupdate () {

	if	[[ -e /tmp/noupdates ]] && [[ -e /tmp/updates  ]]; then rm /tmp/noupdates ;	fi
	if	[[ -e /tmp/noupdates ]]; then echo ; cat /tmp/noupdates ; echo ; exit ; 	fi
	if	[[ ! -e /tmp/updates ]] && [[ ! -e /tmp/md5sum ]]; then
	. aurt-info --vcsupdateprint1 ; exit;							fi

if	[[ $(cat /tmp/md5sum) = $(md5sum /tmp/updates) ]]; then                 # Integrity check updates file
	awk '!seen[$0]++' /tmp/updates >/tmp/ud && mv /tmp/ud /tmp/updates      # Prepare update list by removing any duplicate entries

	readarray -t udarray <<< "$(cat /tmp/updates | awk '!seen[$0]++')"	# Set filtered update list in array

	udlist="${udarray[*]}"							# Set update list to var for aurt-info

			 ### SC2124: Assigning an array to a string! Assign as array, or use * instead of @ to concatenate.

	N="${#udarray[@]}"							# Set number of updates to var for aurt-info
										
	. aurt-info --vcsupdateprint2
   else
	. aurt-info --vcsupdateprint5; exit					# If integrity check failure, exit with message
fi
	echo -e "${cyan}" "${bold}"
	. aurt-info --vcsupdateprint3
	. aurt-info --vcsupdateprint4
while true									# Message user, get authorization to proceed with update
	do 	read -r -n 1 -p ":: Proceed with update? [Y/n]
" -s yn
	echo -e "${none}"
	case $yn in
		y|yes) break	 	;;
		n|no)  return; exit	;;
		 *) echo "y-n ?" 	;;
	esac
done
	aursync --force --no-confirm "${udarray[@]}"				# Build ...
	sudo pacman -S --noconfirm --color=always "${udarray[@]}"		# And install updates

	rm /tmp/updates								# Delete update related files
	rm /tmp/md5sum
	rm /tmp/noupdates 2>/dev/null

	: "$N"
}

   #=================================================== DEPENDENCIES ====================================================

dependencies () {
										# Gather raw dependency data. AUR + OFFICIAL combined, and AUR specific.
		   								# muall  =   met unmet all combined dependencies
	readarray -t muall <<< "$(aurchain -a "${2}"|sed '$d')"
	if [[ -z ${muall[*]} ]]; then unset muall; fi
		   								# aurd  =   aur repo dependencies met unmet
	readarray -t aurd <<< "$(aurchain "${2}"|sed '$d')"
	if [[ -z ${aurd[*]} ]]; then unset aurd; fi
		   								# Filter to get unmet AUR+OFFICIAL combined.
		   								# uall  =   umet all dependencies
	readarray -t uall <<< "$(pacman -T "${muall[@]}" 2>/dev/null)"
		   								# Filter to get unmet AUR.
		   								# uaur  =   unmet aur repos
	readarray -t uaur <<< "$(pacman -T "${aurd[@]}")"
	if [[ -z ${uaur[*]} ]]; then unset uaur; fi
		   								# Filter to get unmet OFFICIAL.
		   								# uoff  =   unmet official repos
	readarray -t uoff <<< "$(comm -23 <(echo "${uall[@]}"|fmt -1|sort\
				|awk '{$1=$1}1') <(echo "${uaur[@]}"|fmt -1\
				|sort|awk '{$1=$1}1'))"

	if [[ -z ${uoff[*]} ]]; then unset uoff; fi

	 uaurp=$(echo "${uaur[@]}"  | fmt -140)
	 uoffp=$(echo "${uoff[@]}"  | fmt -140)
	 aurdp=$(echo "${aurd[@]}"  | fmt -140)
	muallp=$(echo "${muall[@]}" | fmt -140)


	. aurt-info --dependenciesprint "${@}"
}
   #====================================================== PKGINFO ======================================================

pkginfo () {
		addinfo () {
			while true
 			do read -r -t 5 -n 1 -p ":: Want additional info?                yes/no (5 sec timeout to no)
"			-s yn || { echo && exit; }
				echo
				case $yn in
				y|yes) break	 ;;
				n|no)  exit	 ;;
				* ) echo "y-n ?" ;;
				esac
			done
		}
   # ---------------------------------------------------------------------------------------# IS THE PACKAGE AVAILABLE ?
   
### pacman -Ssq ^"${2}"$ &>/dev/null  exit codes 0 . Should exit code 1 on 'xorg' which is not a package.
### Pacman regex broken or me?  Switched to: expac %n -S "${2}" >/dev/null on Nov 25, 2018

	expac %n -S "${2}" >/dev/null || cower -i "${2}" &>/dev/null || pacman -Qi "${2}" &>/dev/null || { 
	. aurt-info --pkginfoprint1 "${2}"
	exit; }
   # --------------------------------------------------------------------------------------# IT IS INSTALLED, WANT INFO ?
if	[[ $(pacman -Qq "${2}" 2>/dev/null | aursift 2>/dev/null) = "${2}" ]]; then

	. aurt-info --pkginfoprint2 "${2}"

	addinfo
	pacman -Sii "${2}" 2>/dev/null || cower -i "${2}" || pacman -Qi "${2}"

	exit
fi
if	[[ -n $(pacman -Qq "${2}" 2>/dev/null) ]]; then

	. aurt-info --pkginfoprint3 "${2}"

	addinfo
	pacman -Sii --color=always "${2}"

	exit
fi
   # ----------------------------------------------------------------------------------------# IS NOT INSTALLED, WANT INFO ?

if	[[ $(pacman -Ssq "${2}" 2>/dev/null | aursift 2>/dev/null |awk '/^'"${2}"'$/') = "${2}" ]] &&
	[[ $(cower -sq "${2}" |awk '/^'"${2}"'$/') = "${2}" ]]; then

	. aurt-info --pkginfoprint5 "${2}"

	addinfo
	pacman -Sii --color=always "${2}" ; exit
fi
if	[[ -z $(pacman -Ssq "${2}" 2>/dev/null | aursift 2>/dev/null |awk '/^'"${2}"'$/') ]] &&
	[[ $(cower -sq "${2}" |awk '/^'"${2}"'$/') = "${2}" ]]; then

	. aurt-info --pkginfoprint5 "${2}"

	addinfo
	cower -i "${2}"; exit
fi
if	[[ $(pacman -Ssq "${2}" 2>/dev/null |awk '/^'"${2}"'$/') = "${2}" ]]; then

	. aurt-info --pkginfoprint4 "${2}"

	addinfo
	pacman -Sii --color=always "${2}" ; exit
fi
}
   #=================================================== PACKAGELIST =====================================================

packagelist () {

	sudo pacsync aur &>/dev/null
	readarray -t pkglst <<< "$(pacman -Qq| aursift 2>/dev/null)"

	. aurt-info --packagelistprint1
	echo "${pkglst[@]}"

	. aurt-info --packagelistprint2
	pacman -Q --color=always "${pkglst[@]}" | column -t

	. aurt-info --packagelistprint3
	pacman -Sl aur | column -t
	echo
}
   #=================================================== MAKEDEPZ ======================================================
### SC2046: Quote this to prevent word splitting. [2 places, quoting breaks function]

makedepz () {

	. aurt-info --makedepz1
	cower -i --format=%M --listdelim=' ' $(pacman -Qq | aursift 2>/dev/null) | \
	fmt -1 | awk -F'<|>|=' '{print $1}' | awk '!seen[$0]++' | sort >/tmp/mdz
	cat /tmp/mdz

	. aurt-info --makedepz2
	pacman -Qq $(cat /tmp/mdz) 2>&1 1>/dev/null | awk -F"'" '{print $2}' | awk '!seen[$0]++' | sort ; echo
}
   #===================================================== ORPH ==========================================================

orph () {

	. aurt-info --orphprint
	pacman -Qtdq --color=always ; echo
}
   #====================================================== DEV ==========================================================

dev () {

	. aurt-info --devprint
	pacman -Qq | awk '/^.+(-cvs|-svn|-git|-hg|-bzr|-darcs)$/' ; echo
}
   #===================================================== BYSIZE ========================================================

bysize () {

	. aurt-info --bysizeprint
	expac -H M '%m\t%n' | sort -hr | head -n 30 | column -t -R1 ; echo
#	expac --timefmt='%F %T' '%l %n' | sort -r | head -n 30 | column -t ### by date
}
   #===================================================== PGPKEY ========================================================

pgpkey () {

	gpg --recv-key "${2}"
}
   #=================================================== PARAMERROR ======================================================

parametererror () {

	. aurt-info --parametererrorprint
}
   #=================================================== RUN FUNCTIONS ===================================================

if 	[[ -z "$*" ]]; then aurt-info --header; exit; fi

while	:; do
	case "${1}" in
	 -S|--install)		install			"${@}"						;;
	-Sf|--force)		forceinstall		"${@}"						;;
       -Syu|--udate)		update									;;
	-Ss|--search)		search			"${@}" 						;;
	 -R|--remove)		remove			"${@}"						;;
	 -U|--maninst)		manualinstall		"${@}"						;;
	-Qu|--udr)		udreport								;;
	-Vc|--vcscheck)		sync									;;
	-Vu|--vcsupdate)	vcsupdate								;;
	-pd|--pdepends)		dependencies		"${@}"						;;
	-pf|--pfiles)		pkgfile			"${2}"						;;
	-pi|--pinfo)		pkginfo			"${@}"						;;
	-la|--plist)		packagelist		"${@}"						;;
	-lf|--lfiles)		echo ; pacman -Ql	"${2}" |awk '{print $2}'; echo			;;
	-lm|--mdeps)		makedepz								;;
	-lo|--lorphans)		orph									;;
	-lv|--lvcs)			dev								;;
       -pgp|key)         	pgpkey			"${@}"						;;
       -log|--paclog)		paclog									;;
       -T30|--bysize)		bysize									;;
	 -h|--help)		. aurt-info --help	"${@}"						;;
	-?*)			parametererror;		aurt-info --header				;;
	  *)	break
	esac
    shift
done

unset PAGER
unset AURDEST
	
		### Do nothing command below to satisfy shellcheck SC2034. These vars are used in aurt-info
	if [[ "$uaurp"||"$uoffp"||"$aurdp"||"$muallp"||"$audN"||"$nwrN"||"$equN"||"$udlist" != 0 ]]; then : ; fi 
